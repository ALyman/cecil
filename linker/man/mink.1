.\"
.\" Mink manual page.
.\"
.\" Author:
.\"	Jb Evain  <jbevain@novell.com>
.\"
.\" Copyright (C) 2007 Novell, Inc (http://www.novell.com)
.\"

.de Sp
.if t .sp .5v
.if n .sp
..
.TH CIL Linker "mink"
.SH NAME
Mono CIL Linker
.SH SYNOPSIS
.PP
.B mink [-o output_directory] [-c skip | copy | link] -x descriptor | -a assemblies ...
.SH DESCRIPTION
\fImink\fP is a CIL Linker.

The linker is a tool one can use to only ship the minimal possible set of
functions that a set of programs might require to run as opposed to the full
libraries.
.PP
The linker analyses the intermediate code (CIL) produced by every compiler
targeting the Mono platform like mcs, gmcs, vbnc, booc or others. It will walk
through all the code that it is given to it, and basically, perform a mark and
sweep operations on all the code that it is referenced, to only keep what is
necessary for the source program to run.
.SH OPTIONS
.TP
.I "-o output_directory"
Specify the output directory, default is 'output'.
.PP
If you specify the directory `.', please ensure that you won't write over
important assemblies of yours.
.TP
.I "-c action"
Specify the action to apply to the core assemblies.
.PP
Core assemblies are the assemblies that belongs to the base class library,
like mscorlib.dll, System.dll or System.Windows.Forms.dll.
.PP
The linker can do 3 things about them:
.PP
.nf
	skip them, and do nothing with them,
	copy them to the output directory,
	link them, to reduce their size.
.fi
.PP
You can specify what action to do on the core assemblies with the option:
.TP
.I "-x descriptor"
Use an XML descriptor as a source for the linker.
.PP
Here is an example that shows all the possibilities of this format:
.PP
.nf
<linker>
	<assembly fullname="Library">
		<type fullname="Foo" />
		<type fullname="Bar" preserve="nothing" required="false" />
		<type fullname="Baz" preserve="fields" required="false" />
		<type fullname="Gazonk">
			<method signature="System.Void .ctor(System.String)" />
			<field signature="System.String _blah" />
		</type>
	</assembly>
</linker>
.fi
.PP
In this example, the linker will link the types Foo, Bar, Baz and Gazonk.
.PP
The preserve attribute ensures that all the fields of the type Baz will be
always be linked, not matter if they are used or not, but that neither the
fields or the methods of Bar will be linked if they are not used. Not
specifying a preserve attribute implies that we are preserving everything in
the specified type.
.PP
The required attribute specifies that if the type is not marked, during the
mark operation, it will not be linked.
.PP
The type Gazonk will be linked, as well as its constructor taking a string as a
parameter, and it's _blah field.
.PP
You can have multiple assembly nodes.
.TP
.I "-a assemblies"
use an assembly as a source for the linker.
.PP
The linker will walk through all the methods of the assembly to generate only what
is necessary for this assembly to run.
.SH COPYRIGHT
Copyright (C) 2007 Novell, Inc (http://www.novell.com)
.SH BUGS
Bugs report are welcome at http://bugzilla.ximian.com
.PP
Product Mono Tools, Component linker.
.SH MAILING LISTS
Mailing lists are listed at http://www.mono-project.com/Mailing_Lists
.SH WEB SITE
http://www.mono-project.com/Linker
.SH AUTHORS
The linker has been written by Jb Evain, and have been partially founded by
the Google Summer of Code.
.SH LICENSE
The linker is licensed under the MIT/X11 license. Please read the accompayning
MIT.X11 file for details.
.SH SEE ALSO
.BR mono(1)
