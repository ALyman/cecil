//
// Gendarme.Rules.Naming.NamingUtils
//
// Authors:
//	Daniel Abramov <ex@vingrad.ru>
//	Sebastien Pouliot  <sebastien@ximian.com>
//	Nidhi Rawal <sonu2404@gmail.com>
//
// Copyright (c) <2007> Nidhi Rawal
// Copyright (C) 2007 Novell, Inc (http://www.novell.com)
// Copyright (c) 2007 Daniel Abramov
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

using Mono.Cecil;

using Gendarme.Framework;

namespace Gendarme.Rules.Naming {

	internal static class NamingUtils {

		private static bool HasAttribute (CustomAttributeCollection cac, string fullname)
		{
			foreach (CustomAttribute custom in cac) {
				if (custom.Constructor.DeclaringType.FullName == fullname)
					return true;
			}
			return false;
		}

		private static bool IsGeneratedByCompiler (TypeReference type)
		{
			return HasAttribute (type.CustomAttributes, "System.Runtime.CompilerServices.CompilerGeneratedAttribute");
		}

		public static bool IsNameGeneratedByCompiler (TypeDefinition type)
		{
			// <Module> isn't tagged as generated by the compiler but still must be ignored
			if (type.Name == Constants.ModuleType)
				return true;

			if (type.IsNested)
				return IsGeneratedByCompiler (type) || IsGeneratedByCompiler (type.DeclaringType);

			return IsGeneratedByCompiler (type);
		}

		public static bool IsNameGeneratedByCompiler (MethodDefinition method)
		{
			if (method.IsConstructor)
				return true;
			if (method.IsRuntimeSpecialName)
				return true;
			if (method.IsSpecialName)
				return true;
			if (method.IsCompilerControlled)
				return true;

			return HasAttribute (method.CustomAttributes, "System.Runtime.CompilerServices.CompilerGeneratedAttribute");
		}
	}
}
